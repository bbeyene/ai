"""
An encoder that takes as arguments the number of monopoles m and number of rooms n and produces an encoding of the m, n Monopoles problem as a propositional SAT formula in Conjunctive Normal form (CNF) using DIMACS format on its standard output.
"""

#!/usr/bin/python3
# Solution for part one of Monopoles found at https://www.drdobbs.com/monopoles/184411053
# Bruh Beyene
# CS441 Artificial Intelligence HW1
import sys

M = int(sys.argv[1]) # number of monopoles
N = int(sys.argv[2]) # number of rooms

# Given M monopoles and N rooms, return the atom
# corresponding to L[m][n]
def L(m, n):
        return M * n + m + 1

def clause(c):
    clauses.append(c)

clauses = []

for m in range(M):
    clause([L(m, n) for n in range(N)])

for m in range(M):
    clause([-L(m, n) for n in range(N)])

for m in range(M):
    clause([-L(m, n) for n in range(N) if m1 != m2])


# Emit the problem description.
print("c", "generated by monosat")
print("p", "cnf", M*N, len(clauses))
for c in clauses:
    for l in c:
        print(l, "", end="")
    print("0") 
